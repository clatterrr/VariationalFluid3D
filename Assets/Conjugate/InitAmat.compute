// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWStructuredBuffer<float> AmatCenter;
RWStructuredBuffer<float3> AmatDown;
RWStructuredBuffer<float3> AmatUp;
RWStructuredBuffer<float> SolidPhi; // 小于零点五则是流体区域
RWStructuredBuffer<float> rhs;
int Nx;

[numthreads(512,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int ix = (id.x % Nx);
    int iy = (id.x % (Nx * Nx) / Nx);
    int iz = (id.x / (Nx * Nx));

    AmatCenter[id.x] = 0;
    AmatDown[id.x].x = 0;
    AmatDown[id.x].y = 0;
    AmatDown[id.x].z = 0;
    AmatUp[id.x].x = 0;
    AmatUp[id.x].y = 0;
    AmatUp[id.x].z = 0;
    rhs[id.x] = 0;

    if (ix > 0)
    {
        AmatCenter[id.x] += 1;
        AmatDown[id.x].x -= 1;
        rhs[id.x] += 1;
    }

    if (ix < Nx - 1)
    {
        AmatCenter[id.x] += 1;
        AmatUp[id.x].x -= 1;
        rhs[id.x] -= 1;
    }

    if (iy > 0)
    {
        AmatCenter[id.x] += 1;
        AmatDown[id.x].y -= 1;
       rhs[id.x] += 1;
    }

    if (iy < Nx - 1)
    {
        AmatCenter[id.x] += 1;
        AmatUp[id.x].y -= 1;
         rhs[id.x] -= 1;
    }

    if (iz > 0)
    {
        AmatCenter[id.x] += 1;
        AmatDown[id.x].z -= 1;
        rhs[id.x] += 1;
    }

    if (iz < Nx - 1)
    {
        AmatCenter[id.x] += 1;
        AmatUp[id.x].z -= 1;
        rhs[id.x] -= 1;
    }
}
