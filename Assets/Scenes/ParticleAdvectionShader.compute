// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWStructuredBuffer<float3> Velocity;
RWStructuredBuffer<float3> ParticlePos;

int Nx;
float dt;
float dx;

float lerp(float a, float b, float x)
{
    return (1 - x) * a + x * b;
}

float bilerp(float v00, float v10, float v01, float v11, float fx, float fy)
{
    return lerp(lerp(v00, v10, fx), lerp(v01, v11, fx), fy);
}

float3 GetVelocity(float3 pos) // pos.x pos.y pos.z : 0 ~ 1
{
    float px = pos.x / dx;
    float py = pos.y / dx;
    float pz = pos.z / dx;

    int bx = floor(px);
    int by = floor(py);
    int bz = floor(pz);

    float fx = px - bx;
    float fy = py - by;
    float fz = pz - bz;
    
    float3 res;
    float v000, v100, v010, v001, v110, v101, v011, v111;
    float nx, ny, nz, idx;
    int basex, basey, basez;
    nx = Nx + 1;
    ny = Nx;
    nz = Nx;
    basex = px;
    basey = py;
    basez = pz;

    bx = floor(basex);
    by = floor(basey);
    bz = floor(basez);
    fx = basex - bx;
    fy = basey - by;
    fz = basez - bz;

    if (basex < 0)basex = 0, fx = 0;
    if (basex > nx - 2) basex = nx - 2, fx = 1;
    if (basey < 0)basey = 0, fy = 0;
    if (basey > ny - 2) basey = ny - 2, fy = 1;
    if (basez < 0)basez = 0, fz = 0;
    if (basez > nz - 2) basez = nz - 2, fz = 1;

    idx = basez * nx * ny + basey * nx + basex;
    v000 = Velocity[idx].x;
    v100 = Velocity[idx + 1].x;
    v010 = Velocity[idx + nx].x;
    v001 = Velocity[idx + nx * ny].x;
    v110 = Velocity[idx + nx + 1].x;
    v101 = Velocity[idx + 1 + nx * ny].x;
    v011 = Velocity[idx + nx + nx * ny].x;
    v111 = Velocity[idx + 1 + nx + nx * ny].x;
    res.x = lerp(bilerp(v000, v100, v010, v110, fx, fy), bilerp(v001, v101, v011, v111, fx, fy), fz);
   // res.x = lerp(v000, v100, fx);

    nx = Nx;
    ny = Nx + 1;
    nz = Nx;

    basex = px;
    basey = py;
    basez = pz;

    bx = floor(basex);
    by = floor(basey);
    bz = floor(basez);
    fx = basex - bx;
    fy = basey - by;
    fz = basez - bz;

    if (basex < 0)basex = 0, fx = 0;
    if (basex > nx - 2) basex = nx - 2, fx = 1;
    if (basey < 0)basey = 0, fy = 0;
    if (basey > ny - 2) basey = ny - 2, fy = 1;
    if (basez < 0)basez = 0, fz = 0;
    if (basez > nz - 2) basez = nz - 2, fz = 1;



    idx = basez * nx * ny + basey * nx + basex;
    v000 = Velocity[idx].y;
    v100 = Velocity[idx + 1].y;
    v010 = Velocity[idx + nx].y;
    v001 = Velocity[idx + nx * ny].y;
    v110 = Velocity[idx + nx + 1].y;
    v101 = Velocity[idx + 1 + nx * ny].y;
    v011 = Velocity[idx + nx + nx * ny].y;
    v111 = Velocity[idx + 1 + nx + nx * ny].y;
    res.y = lerp(bilerp(v000, v100, v010, v110, fx, fy), bilerp(v001, v101, v011, v111, fx, fy), fz);
    //res.y = lerp(v000, v010, fy);

    nx = Nx;
    ny = Nx;
    nz = Nx + 1;

    basex = px;
    basey = py;
    basez = pz;
    bx = floor(basex);
    by = floor(basey);
    bz = floor(basez);
    fx = basex - bx;
    fy = basey - by;
    fz = basez - bz;

    if (basex < 0)basex = 0, fx = 0;
    if (basex > nx - 2) basex = nx - 2, fx = 1;
    if (basey < 0)basey = 0, fy = 0;
    if (basey > ny - 2) basey = ny - 2, fy = 1;
    if (basez < 0)basez = 0, fz = 0;
    if (basez > nz - 2) basez = nz - 2, fz = 1;

    idx = basez * nx * ny + basey * nx + basex;
    v000 = Velocity[idx].z;
    v100 = Velocity[idx + 1].z;
    v010 = Velocity[idx + nx].z;
    v001 = Velocity[idx + nx * ny].z;
    v110 = Velocity[idx + nx + 1].z;
    v101 = Velocity[idx + 1 + nx * ny].z;
    v011 = Velocity[idx + nx + nx * ny].z;
    v111 = Velocity[idx + 1 + nx + nx * ny].z;
    res.z = lerp(bilerp(v000, v100, v010, v110, fx, fy), bilerp(v001, v101, v011, v111, fx, fy), fz);
    res.z = lerp(v000, v001, fz);

    return res;
}

[numthreads(512,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float3 pos0 = ParticlePos[id.x];
    float3 vel0 = GetVelocity(pos0);
    float3 pos1 = pos0 + dt * vel0;
    float3 vel1 = GetVelocity(pos1);
    float3 pos2 = pos1 + dt * vel1;
    ParticlePos[id.x] = (pos0 + pos2) / 2;
    ParticlePos[id.x].z = 0.5f;
}
