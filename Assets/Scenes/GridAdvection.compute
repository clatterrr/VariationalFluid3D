// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<float3> oldold_field;
RWStructuredBuffer<float3> old_field;
RWStructuredBuffer<float3> new_field;

float dt;
float dx;
int Nx;

float3 lerp(float3 a, float3 b, float x)
{
    return (1 - x) * a + x * b;
}

float3 bilerp(float3 v00, float3 v10, float3 v01, float3 v11, float fx, float fy)
{
    return lerp(lerp(v00, v10, fx), lerp(v01, v11, fx), fy);
}

float interpolate(float bx, float by, float bz, int type, float3 vel)
{
    float gx = bx - dt * vel.x / dx;
    float gy = by - dt * vel.y / dx;
    float gz = by - dt * vel.z / dx;

    int ix = floor(gx);
    int iy = floor(gy);
    int iz = floor(gz);

    float fx = gx - ix;
    float fy = gy - iy;
    float fz = gz - iz;

    if (ix < 0)
    {
        ix = 0;
        fx = 0;
    }

    if (iy < 0)
    {
        iy = 0;
        fy = 0;
    }

    if (iz < 0)
    {
        iz = 0;
        fz = 0;
    }

    int nx = Nx, ny = Nx, nz = Nx;
    if (type == 0)nx += 1;
    else if (type == 1)ny += 1;
    else if (type == 2)nz += 1;

    if (ix > nx - 2)
    {
        ix = nx - 2;
        fx = 1;
    }

    if (iy > ny - 2)
    {
        iy = ny - 2;
        fy = 1;
    }

    if (iz > nz - 2)
    {
        iz = nz - 2;
        fz = 1;
    }

    int idx = iz * nx * ny + iy * nx + ix;
    float3 v000 = old_field[idx];
    float3 v100 = old_field[idx + 1];
    float3 v010 = old_field[idx + nx];
    float3 v001 = old_field[idx + nx * ny];
    float3 v110 = old_field[idx + nx + 1];
    float3 v101 = old_field[idx + 1 + nx * ny];
    float3 v011 = old_field[idx + nx + nx * ny];
    float3 v111 = old_field[idx + 1 + nx + nx * ny];
    float3 res = lerp(bilerp(v000, v100, v010, v110, fx, fy), bilerp(v001, v101, v011, v111, fx, fy), fz);
    if (type == 0)return res.x;
    else if (type == 1)return res.y;
    else return res.z;
}

[numthreads(1024, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // x 轴 方向上的 u ，形式为 (Nx + 1) * Nx * Nx
   // 混合粒子网格大法好，这种交错网格真难算
    int basex = floor(id.x % (Nx + 1));
    int basey = floor(id.x % ((Nx + 1) * Nx) / (Nx + 1));
    int basez = floor(id.x / ((Nx + 1) * Nx));

    new_field[id.x].x = interpolate(basex, basey, basez, 0, old_field[id.x]);

    basex = floor(id.x % Nx);
    basey = floor(id.x % ((Nx + 1) * Nx) / Nx);
    basez = floor(id.x / ((Nx + 1) * Nx));

    new_field[id.x].y = interpolate(basex, basey, basez, 1, old_field[id.x]);

    basex = floor(id.x % Nx);
    basey = floor(id.x % (Nx * Nx) / Nx);
    basez = floor(id.x / (Nx * Nx));

    new_field[id.x].z = interpolate(basex, basey, basez, 2, old_field[id.x]);

    oldold_field[id.x] = old_field[id.x];
}
